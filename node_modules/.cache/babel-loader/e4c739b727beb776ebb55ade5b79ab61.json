{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { APIRoute } from '../const';\nimport { loadGuitars } from './catalog-process/catalog-process';\nimport { loadComments, loadGuitar } from './product-process/product-process';\nimport { redirectToRoute } from './actions';\nimport { errorHandle } from '../services/error-handle';\nexport const fetchGuitarsActions = createAsyncThunk('data/fetchGuitars', async (_arg, _ref) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref;\n\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Guitars}?_embed=comments`);\n    dispatch(loadGuitars(data));\n  } catch (error) {\n    dispatch(redirectToRoute('/*'));\n  }\n});\nexport const fetchGuitarActions = createAsyncThunk('data/fetchGuitar', async (id, _ref2) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref2;\n\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Guitar}${id}`);\n    dispatch(loadGuitar(data));\n  } catch (error) {\n    dispatch(redirectToRoute('/*'));\n  }\n});\nexport const fetchCommentsActions = createAsyncThunk('data/fetchComments', async (id, _ref3) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref3;\n\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Guitar}${id}${APIRoute.Comments}`);\n    dispatch(loadComments(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const AddCommentAction = createAsyncThunk('data/postComment', async (_ref4, _ref5) => {\n  let {\n    guitarId,\n    userName,\n    advantage,\n    disadvantage,\n    comment,\n    rating\n  } = _ref4;\n  let {\n    dispatch,\n    extra: api\n  } = _ref5;\n\n  try {\n    await api.post(`${APIRoute.Comments}`, {\n      guitarId,\n      userName,\n      advantage,\n      disadvantage,\n      comment,\n      rating\n    });\n    api.request.call;\n  } catch (error) {\n    errorHandle(error);\n  }\n});","map":{"version":3,"sources":["C:/Users/imail/Desktop/Projects/guitar-shop/src/store/api-actions.ts"],"names":["createAsyncThunk","APIRoute","loadGuitars","loadComments","loadGuitar","redirectToRoute","errorHandle","fetchGuitarsActions","_arg","dispatch","extra","api","data","get","Guitars","error","fetchGuitarActions","id","Guitar","fetchCommentsActions","Comments","AddCommentAction","guitarId","userName","advantage","disadvantage","comment","rating","post","request","call"],"mappings":"AAAA,SAAQA,gBAAR,QAA+B,kBAA/B;AAGA,SAAQC,QAAR,QAAuB,UAAvB;AAEA,SAAQC,WAAR,QAA0B,mCAA1B;AACA,SAAQC,YAAR,EAAsBC,UAAtB,QAAmD,mCAAnD;AACA,SAAQC,eAAR,QAA8B,WAA9B;AACA,SAAQC,WAAR,QAA0B,0BAA1B;AAGA,OAAO,MAAMC,mBAAmB,GAChCP,gBAAgB,CAKd,mBALc,EAMd,OAAOQ,IAAP,WAAwC;AAAA,MAA3B;AAACC,IAAAA,QAAD;AAAWC,IAAAA,KAAK,EAAEC;AAAlB,GAA2B;;AACtC,MAAI;AACF,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMD,GAAG,CAACE,GAAJ,CAAkB,GAAEZ,QAAQ,CAACa,OAAQ,kBAArC,CAArB;AACAL,IAAAA,QAAQ,CAACP,WAAW,CAACU,IAAD,CAAZ,CAAR;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdN,IAAAA,QAAQ,CAACJ,eAAe,CAAC,IAAD,CAAhB,CAAR;AACD;AACF,CAba,CADT;AAiBP,OAAO,MAAMW,kBAAkB,GAC/BhB,gBAAgB,CAKd,kBALc,EAMd,OAAOiB,EAAP,YAAsC;AAAA,MAA3B;AAACR,IAAAA,QAAD;AAAWC,IAAAA,KAAK,EAAEC;AAAlB,GAA2B;;AACpC,MAAI;AACF,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMD,GAAG,CAACE,GAAJ,CAAiB,GAAEZ,QAAQ,CAACiB,MAAO,GAAED,EAAG,EAAxC,CAArB;AACAR,IAAAA,QAAQ,CAACL,UAAU,CAACQ,IAAD,CAAX,CAAR;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdN,IAAAA,QAAQ,CAACJ,eAAe,CAAC,IAAD,CAAhB,CAAR;AACD;AACF,CAba,CADT;AAiBP,OAAO,MAAMc,oBAAoB,GACjCnB,gBAAgB,CAKd,oBALc,EAMd,OAAOiB,EAAP,YAAsC;AAAA,MAA3B;AAACR,IAAAA,QAAD;AAAWC,IAAAA,KAAK,EAAEC;AAAlB,GAA2B;;AACpC,MAAI;AACF,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMD,GAAG,CAACE,GAAJ,CAAmB,GAAEZ,QAAQ,CAACiB,MAAO,GAAED,EAAG,GAAEhB,QAAQ,CAACmB,QAAS,EAA9D,CAArB;AACAX,IAAAA,QAAQ,CAACN,YAAY,CAACS,IAAD,CAAb,CAAR;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdT,IAAAA,WAAW,CAACS,KAAD,CAAX;AACD;AACF,CAba,CADT;AAiBP,OAAO,MAAMM,gBAAgB,GAC3BrB,gBAAgB,CAKhB,kBALgB,EAMhB,wBAAkG;AAAA,MAA3F;AAACsB,IAAAA,QAAD;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA,SAArB;AAAgCC,IAAAA,YAAhC;AAA8CC,IAAAA,OAA9C;AAAuDC,IAAAA;AAAvD,GAA2F;AAAA,MAA3B;AAAClB,IAAAA,QAAD;AAAWC,IAAAA,KAAK,EAAEC;AAAlB,GAA2B;;AAChG,MAAI;AAAC,UAAMA,GAAG,CAACiB,IAAJ,CAAU,GAAE3B,QAAQ,CAACmB,QAAS,EAA9B,EAAiC;AAACE,MAAAA,QAAD;AAAWC,MAAAA,QAAX;AAAqBC,MAAAA,SAArB;AAAgCC,MAAAA,YAAhC;AAA8CC,MAAAA,OAA9C;AAAuDC,MAAAA;AAAvD,KAAjC,CAAN;AACHhB,IAAAA,GAAG,CAACkB,OAAJ,CAAYC,IAAZ;AACD,GAFD,CAEE,OAAOf,KAAP,EAAc;AACdT,IAAAA,WAAW,CAACS,KAAD,CAAX;AACD;AACF,CAZe,CADX","sourcesContent":["import {createAsyncThunk} from '@reduxjs/toolkit';\r\nimport {AxiosInstance} from 'axios';\r\nimport {AppDispatch, State} from '../types/store-types';\r\nimport {APIRoute} from '../const';\r\nimport {Guitar, Guitars, Comments, NewComment} from '../types/data-types';\r\nimport {loadGuitars} from './catalog-process/catalog-process';\r\nimport {loadComments, loadGuitar, addComment} from './product-process/product-process';\r\nimport {redirectToRoute} from './actions';\r\nimport {errorHandle} from '../services/error-handle';\r\n\r\n\r\nexport const fetchGuitarsActions =\r\ncreateAsyncThunk <void, undefined, {\r\n  dispatch: AppDispatch,\r\n  state: State,\r\n  extra: AxiosInstance\r\n}>(\r\n  'data/fetchGuitars',\r\n  async (_arg, {dispatch, extra: api}) => {\r\n    try {\r\n      const {data} = await api.get<Guitars>(`${APIRoute.Guitars}?_embed=comments`);\r\n      dispatch(loadGuitars(data));\r\n    } catch (error) {\r\n      dispatch(redirectToRoute('/*'));\r\n    }\r\n  },\r\n);\r\n\r\nexport const fetchGuitarActions =\r\ncreateAsyncThunk <void, string, {\r\n  dispatch: AppDispatch,\r\n  state: State,\r\n  extra: AxiosInstance\r\n}>(\r\n  'data/fetchGuitar',\r\n  async (id, {dispatch, extra: api}) => {\r\n    try {\r\n      const {data} = await api.get<Guitar>(`${APIRoute.Guitar}${id}`);\r\n      dispatch(loadGuitar(data));\r\n    } catch (error) {\r\n      dispatch(redirectToRoute('/*'));\r\n    }\r\n  },\r\n);\r\n\r\nexport const fetchCommentsActions =\r\ncreateAsyncThunk <void, string, {\r\n  disadvantage: AppDispatch,\r\n  state: State,\r\n  extra: AxiosInstance\r\n}>(\r\n  'data/fetchComments',\r\n  async (id, {dispatch, extra: api}) => {\r\n    try {\r\n      const {data} = await api.get<Comments>(`${APIRoute.Guitar}${id}${APIRoute.Comments}`);\r\n      dispatch(loadComments(data));\r\n    } catch (error) {\r\n      errorHandle(error);\r\n    }\r\n  },\r\n);\r\n\r\nexport const AddCommentAction =\r\n  createAsyncThunk<void, NewComment, {\r\n  disadvantage: AppDispatch,\r\n  state: State,\r\n  extra: AxiosInstance\r\n}>(\r\n  'data/postComment',\r\n  async ({guitarId, userName, advantage, disadvantage, comment, rating}, {dispatch, extra: api}) => {\r\n    try {await api.post(`${APIRoute.Comments}`, {guitarId, userName, advantage, disadvantage, comment, rating});\r\n      api.request.call\r\n    } catch (error) {\r\n      errorHandle(error);\r\n    }\r\n  },\r\n);\r\n"]},"metadata":{},"sourceType":"module"}