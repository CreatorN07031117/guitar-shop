{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { APIRoute } from '../const';\nimport { loadGuitars } from './catalog-process/catalog-process';\nimport { loadComments, loadGuitar } from './product-process/product-process';\nimport { redirectToRoute } from './actions';\nimport { errorHandle } from '../services/error-handle';\nexport const fetchGuitarsActions = createAsyncThunk('data/fetchGuitars', async (_arg, _ref) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref;\n\n  try {\n    const {\n      data\n    } = await api.get(APIRoute.Guitars);\n    dispatch(loadGuitars(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchGuitarActions = createAsyncThunk('data/fetchGuitar', async (id, _ref2) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref2;\n\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Guitar}${id}`);\n    dispatch(loadGuitar(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchCommentsActions = createAsyncThunk('data/fetchComments', async (id, _ref3) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref3;\n\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Guitar}${id}${APIRoute.Comments}`);\n    dispatch(loadComments(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const commentAction = createAsyncThunk('data/postComment', async (_ref4, _ref5) => {\n  let {\n    id,\n    userName,\n    advantage,\n    disadvantage,\n    comment,\n    rating\n  } = _ref4;\n  let {\n    dispatch,\n    extra: api\n  } = _ref5;\n  await api.post(`${APIRoute.Comments}${id}$`, {\n    id,\n    userName,\n    advantage,\n    disadvantage,\n    comment,\n    rating\n  });\n  dispatch(redirectToRoute(`${APIRoute.Guitar}${id}${APIRoute.Comments}`));\n});","map":{"version":3,"sources":["C:/Users/imail/Desktop/Projects/guitar-shop/src/store/api-actions.ts"],"names":["createAsyncThunk","APIRoute","loadGuitars","loadComments","loadGuitar","redirectToRoute","errorHandle","fetchGuitarsActions","_arg","dispatch","extra","api","data","get","Guitars","error","fetchGuitarActions","id","Guitar","fetchCommentsActions","Comments","commentAction","userName","advantage","disadvantage","comment","rating","post"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AAGA,SAASC,QAAT,QAAyB,UAAzB;AAEA,SAASC,WAAT,QAA4B,mCAA5B;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,mCAAzC;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,SAASC,WAAT,QAA4B,0BAA5B;AAIA,OAAO,MAAMC,mBAAmB,GAChCP,gBAAgB,CAKd,mBALc,EAMd,OAAOQ,IAAP,WAAwC;AAAA,MAA3B;AAACC,IAAAA,QAAD;AAAWC,IAAAA,KAAK,EAAEC;AAAlB,GAA2B;;AACtC,MAAI;AACF,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMD,GAAG,CAACE,GAAJ,CAAiBZ,QAAQ,CAACa,OAA1B,CAArB;AACAL,IAAAA,QAAQ,CAACP,WAAW,CAACU,IAAD,CAAZ,CAAR;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdT,IAAAA,WAAW,CAACS,KAAD,CAAX;AACD;AACF,CAba,CADT;AAiBP,OAAO,MAAMC,kBAAkB,GAC/BhB,gBAAgB,CAKd,kBALc,EAMd,OAAOiB,EAAP,YAAsC;AAAA,MAA3B;AAACR,IAAAA,QAAD;AAAWC,IAAAA,KAAK,EAAEC;AAAlB,GAA2B;;AACpC,MAAI;AACF,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMD,GAAG,CAACE,GAAJ,CAAiB,GAAEZ,QAAQ,CAACiB,MAAO,GAAED,EAAG,EAAxC,CAArB;AACAR,IAAAA,QAAQ,CAACL,UAAU,CAACQ,IAAD,CAAX,CAAR;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdT,IAAAA,WAAW,CAACS,KAAD,CAAX;AACD;AACF,CAba,CADT;AAiBP,OAAO,MAAMI,oBAAoB,GACjCnB,gBAAgB,CAKd,oBALc,EAMd,OAAOiB,EAAP,YAAsC;AAAA,MAA3B;AAACR,IAAAA,QAAD;AAAWC,IAAAA,KAAK,EAAEC;AAAlB,GAA2B;;AACpC,MAAI;AACF,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMD,GAAG,CAACE,GAAJ,CAAmB,GAAEZ,QAAQ,CAACiB,MAAO,GAAED,EAAG,GAAEhB,QAAQ,CAACmB,QAAS,EAA9D,CAArB;AACAX,IAAAA,QAAQ,CAACN,YAAY,CAACS,IAAD,CAAb,CAAR;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdT,IAAAA,WAAW,CAACS,KAAD,CAAX;AACD;AACF,CAba,CADT;AAiBP,OAAO,MAAMM,aAAa,GACxBrB,gBAAgB,CAKhB,kBALgB,EAMhB,wBAA4F;AAAA,MAArF;AAACiB,IAAAA,EAAD;AAAKK,IAAAA,QAAL;AAAeC,IAAAA,SAAf;AAA0BC,IAAAA,YAA1B;AAAwCC,IAAAA,OAAxC;AAAiDC,IAAAA;AAAjD,GAAqF;AAAA,MAA3B;AAACjB,IAAAA,QAAD;AAAWC,IAAAA,KAAK,EAAEC;AAAlB,GAA2B;AAC1F,QAAMA,GAAG,CAACgB,IAAJ,CAAU,GAAE1B,QAAQ,CAACmB,QAAS,GAAEH,EAAG,GAAnC,EAAuC;AAACA,IAAAA,EAAD;AAAKK,IAAAA,QAAL;AAAeC,IAAAA,SAAf;AAA0BC,IAAAA,YAA1B;AAAwCC,IAAAA,OAAxC;AAAiDC,IAAAA;AAAjD,GAAvC,CAAN;AACAjB,EAAAA,QAAQ,CAACJ,eAAe,CAAE,GAAEJ,QAAQ,CAACiB,MAAO,GAAED,EAAG,GAAEhB,QAAQ,CAACmB,QAAS,EAA7C,CAAhB,CAAR;AACD,CATe,CADX","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { AxiosInstance } from 'axios';\r\nimport { AppDispatch, State } from '../types/store-types';\r\nimport { APIRoute } from '../const';\r\nimport { Guitar, Guitars, Comments, Comment } from '../types/data-types';\r\nimport { loadGuitars } from './catalog-process/catalog-process';\r\nimport { loadComments, loadGuitar } from './product-process/product-process';\r\nimport { redirectToRoute } from './actions';\r\nimport { errorHandle } from '../services/error-handle';\r\nimport { createECDH } from 'crypto';\r\n\r\n\r\nexport const fetchGuitarsActions =\r\ncreateAsyncThunk <void, undefined, {\r\n  dispatch: AppDispatch,\r\n  state: State,\r\n  extra: AxiosInstance\r\n}>(\r\n  'data/fetchGuitars',\r\n  async (_arg, {dispatch, extra: api}) => {\r\n    try {\r\n      const {data} = await api.get<Guitars>(APIRoute.Guitars);\r\n      dispatch(loadGuitars(data));\r\n    } catch (error) {\r\n      errorHandle(error);\r\n    }\r\n  },\r\n);\r\n\r\nexport const fetchGuitarActions =\r\ncreateAsyncThunk <void, string, {\r\n  dispatch: AppDispatch,\r\n  state: State,\r\n  extra: AxiosInstance\r\n}>(\r\n  'data/fetchGuitar',\r\n  async (id, {dispatch, extra: api}) => {\r\n    try {\r\n      const {data} = await api.get<Guitar>(`${APIRoute.Guitar}${id}`);\r\n      dispatch(loadGuitar(data));\r\n    } catch (error) {\r\n      errorHandle(error);\r\n    }\r\n  },\r\n);\r\n\r\nexport const fetchCommentsActions = \r\ncreateAsyncThunk <void, string, {\r\n  disadvantage: AppDispatch,\r\n  state: State,\r\n  extra: AxiosInstance\r\n}>(\r\n  'data/fetchComments',\r\n  async (id, {dispatch, extra: api}) => {\r\n    try {\r\n      const {data} = await api.get<Comments>(`${APIRoute.Guitar}${id}${APIRoute.Comments}`);\r\n      dispatch(loadComments(data));\r\n    } catch (error) {\r\n      errorHandle(error);\r\n    }\r\n  },\r\n);\r\n\r\nexport const commentAction = \r\n  createAsyncThunk<void, Comment, {\r\n  disadvantage: AppDispatch,\r\n  state: State,\r\n  extra: AxiosInstance\r\n}>(\r\n  'data/postComment',\r\n  async ({id, userName, advantage, disadvantage, comment, rating}, {dispatch, extra: api}) => {\r\n    await api.post(`${APIRoute.Comments}${id}$`, {id, userName, advantage, disadvantage, comment, rating});\r\n    dispatch(redirectToRoute(`${APIRoute.Guitar}${id}${APIRoute.Comments}`));\r\n  },\r\n);\r\n"]},"metadata":{},"sourceType":"module"}