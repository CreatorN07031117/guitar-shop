{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { APIRoute, AppRoute } from '../const';\nimport { loadGuitars, loadGuitarsRange } from './catalog-process/catalog-process';\nimport { loadComments, loadGuitar } from './product-process/product-process';\nimport { redirectToRoute } from './actions';\nimport { errorHandle } from '../services/error-handle';\nexport const fetchGuitarsActions = createAsyncThunk('data/fetchGuitars', async (_arg, _ref) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref;\n\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Guitars}`);\n    dispatch(loadGuitars(data));\n  } catch (error) {\n    dispatch(redirectToRoute(`${AppRoute.NotFound}`));\n  }\n});\nexport const fetchGuitarsRangeActions = createAsyncThunk('data/fetchGuitarsRange', async (_ref2, _ref3) => {\n  let {\n    start,\n    end\n  } = _ref2;\n  let {\n    dispatch,\n    extra: api\n  } = _ref3;\n\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Guitars}?_start=${start}&_end=${end}?_embed=comments`);\n    dispatch(loadGuitarsRange(data));\n  } catch (error) {\n    dispatch(redirectToRoute(`${AppRoute.NotFound}`));\n  }\n});\nexport const fetchGuitarActions = createAsyncThunk('data/fetchGuitar', async (id, _ref4) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref4;\n\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Guitar}${id}`);\n    dispatch(loadGuitar(data));\n  } catch (error) {\n    dispatch(redirectToRoute(`*`));\n  }\n});\nexport const fetchCommentsActions = createAsyncThunk('data/fetchComments', async (id, _ref5) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref5;\n\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Guitar}${id}${APIRoute.Comments}`);\n    dispatch(loadComments(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const AddCommentAction = createAsyncThunk('data/postComment', async (_ref6, _ref7) => {\n  let {\n    guitarId,\n    userName,\n    advantage,\n    disadvantage,\n    comment,\n    rating\n  } = _ref6;\n  let {\n    dispatch,\n    extra: api\n  } = _ref7;\n\n  try {\n    await api.post(`${APIRoute.Comments}${guitarId}$`, {\n      guitarId,\n      userName,\n      advantage,\n      disadvantage,\n      comment,\n      rating\n    });\n    dispatch(redirectToRoute(`${APIRoute.Guitar}${guitarId}${APIRoute.Comments}`));\n  } catch (error) {\n    errorHandle(error);\n  }\n});","map":{"version":3,"sources":["C:/Users/imail/Desktop/Projects/guitar-shop/src/store/api-actions.ts"],"names":["createAsyncThunk","APIRoute","AppRoute","loadGuitars","loadGuitarsRange","loadComments","loadGuitar","redirectToRoute","errorHandle","fetchGuitarsActions","_arg","dispatch","extra","api","data","get","Guitars","error","NotFound","fetchGuitarsRangeActions","start","end","fetchGuitarActions","id","Guitar","fetchCommentsActions","Comments","AddCommentAction","guitarId","userName","advantage","disadvantage","comment","rating","post"],"mappings":"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","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { AxiosInstance } from 'axios';\r\nimport { AppDispatch, State } from '../types/store-types';\r\nimport { APIRoute, AppRoute } from '../const';\r\nimport { Guitar, Guitars, Comments, NewComment, GuitarRange } from '../types/data-types';\r\nimport { loadGuitars, loadGuitarsRange } from './catalog-process/catalog-process';\r\nimport { loadComments, loadGuitar } from './product-process/product-process';\r\nimport { redirectToRoute } from './actions';\r\nimport { errorHandle } from '../services/error-handle';\r\n\r\n\r\nexport const fetchGuitarsActions =\r\ncreateAsyncThunk <void, undefined, {\r\n  dispatch: AppDispatch,\r\n  state: State,\r\n  extra: AxiosInstance\r\n}>(\r\n  'data/fetchGuitars',\r\n  async (_arg, {dispatch, extra: api}) => {\r\n    try {\r\n      const {data} = await api.get<Guitars>(`${APIRoute.Guitars}`);\r\n      dispatch(loadGuitars(data));\r\n    } catch (error) {\r\n      dispatch(redirectToRoute(`${AppRoute.NotFound}`));\r\n    }\r\n  },\r\n);\r\n\r\nexport const fetchGuitarsRangeActions =\r\ncreateAsyncThunk <void, GuitarRange, {\r\n  dispatch: AppDispatch,\r\n  state: State,\r\n  extra: AxiosInstance\r\n}>(\r\n  'data/fetchGuitarsRange',\r\n  async ({start, end}, {dispatch, extra: api}) => {\r\n    try {\r\n      const {data} = await api.get<Guitars>(`${APIRoute.Guitars}?_start=${start}&_end=${end}?_embed=comments`);\r\n      dispatch(loadGuitarsRange(data));\r\n    } catch (error) {\r\n      dispatch(redirectToRoute(`${AppRoute.NotFound}`));\r\n    }\r\n  },\r\n);\r\n\r\nexport const fetchGuitarActions =\r\ncreateAsyncThunk <void, string, {\r\n  dispatch: AppDispatch,\r\n  state: State,\r\n  extra: AxiosInstance\r\n}>(\r\n  'data/fetchGuitar',\r\n  async (id, {dispatch, extra: api}) => {\r\n    try {\r\n      const {data} = await api.get<Guitar>(`${APIRoute.Guitar}${id}`);\r\n      dispatch(loadGuitar(data));\r\n    } catch (error) {\r\n      dispatch(redirectToRoute(`*`));\r\n    }\r\n  },\r\n);\r\n\r\nexport const fetchCommentsActions =\r\ncreateAsyncThunk <void, string, {\r\n  disadvantage: AppDispatch,\r\n  state: State,\r\n  extra: AxiosInstance\r\n}>(\r\n  'data/fetchComments',\r\n  async (id, {dispatch, extra: api}) => {\r\n    try {\r\n      const {data} = await api.get<Comments>(`${APIRoute.Guitar}${id}${APIRoute.Comments}`);\r\n      dispatch(loadComments(data));\r\n    } catch (error) {\r\n      errorHandle(error);\r\n    }\r\n  },\r\n);\r\n\r\nexport const AddCommentAction =\r\n  createAsyncThunk<void, NewComment, {\r\n  disadvantage: AppDispatch,\r\n  state: State,\r\n  extra: AxiosInstance\r\n}>(\r\n  'data/postComment',\r\n  async ({guitarId, userName, advantage, disadvantage, comment, rating}, {dispatch, extra: api}) => {\r\n    try {await api.post(`${APIRoute.Comments}${guitarId}$`, {guitarId, userName, advantage, disadvantage, comment, rating});\r\n      dispatch(redirectToRoute(`${APIRoute.Guitar}${guitarId}${APIRoute.Comments}`));\r\n    } catch (error) {\r\n      errorHandle(error);\r\n    }\r\n  },\r\n);\r\n\r\n"]},"metadata":{},"sourceType":"module"}